{:rename-macros {}, :renames {}, :externs {console {log {}}, Object {}}, :use-macros {log chromex.logging, go cljs.core.async.macros, group chromex.logging, go-loop cljs.core.async.macros, warn chromex.logging, group-end chromex.logging, info chromex.logging, error chromex.logging}, :excludes #{}, :name chromex-sample.background.storage, :imports nil, :requires {cljs.core.async cljs.core.async, chromex.logging chromex.logging, chromex.protocols chromex.protocols, storage chromex.ext.storage, chromex.ext.storage chromex.ext.storage}, :uses {set chromex.protocols, <! cljs.core.async, chan cljs.core.async, get chromex.protocols}, :defs {test-storage! {:protocol-inline nil, :meta {:file "/home/victormartins/Documents/my-repositories-gh/spacechrome/src/background/chromex_sample/background/storage.cljs", :line 8, :column 7, :end-line 8, :end-column 20, :arglists (quote ([]))}, :name chromex-sample.background.storage/test-storage!, :variadic false, :file "/home/victormartins/Documents/my-repositories-gh/spacechrome/src/background/chromex_sample/background/storage.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, chromex.logging chromex.logging, storage chromex.ext.storage, chromex.ext.storage chromex.ext.storage}, :cljs.analyzer/constants {:seen #{:else :recur}, :order [:recur :else]}, :doc nil}