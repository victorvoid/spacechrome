{:rename-macros {}, :renames {}, :use-macros {get-punch-access oops.constants, get-dot-access oops.constants, get-soft-access oops.constants, native-array-aware-* oops.spec}, :excludes #{}, :name oops.sdefs, :imports nil, :requires {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :uses nil, :require-macros {oops.constants oops.constants, oops.spec oops.spec, s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :cljs.analyzer/constants {:seen #{cljs.core/array? cljs.spec.alpha/* get-punch-access :oops.sdefs/obj-selector :selector cljs.core/keyword? :oops.sdefs/obj-key cljs.core/partial :key :oops.sdefs/obj-path-key :oops.sdefs/obj-path cljs.spec.alpha/and cljs.core/partition-all cljs.core/string? cljs.spec.alpha/or :native-array cljs.spec.alpha/tuple :string :oops.sdefs/obj-path-mode % arr cljs.core/map oops.spec/native-array-aware-* get-dot-access cljs.core/let get-soft-access :keyword cljs.spec.alpha/valid? cljs.core/fn :oops.sdefs/obj-path-item cljs.core/vec :regex pairs cljs.core/and cljs.core/every?}, :order [:oops.sdefs/obj-key cljs.spec.alpha/or :string cljs.core/string? :keyword cljs.core/keyword? :oops.sdefs/obj-selector :key :selector oops.spec/native-array-aware-* :regex :native-array cljs.spec.alpha/* cljs.core/fn % cljs.core/and cljs.core/array? cljs.core/every? cljs.core/partial cljs.spec.alpha/valid? :oops.sdefs/obj-path-mode get-soft-access get-punch-access get-dot-access :oops.sdefs/obj-path-key :oops.sdefs/obj-path-item cljs.spec.alpha/tuple :oops.sdefs/obj-path cljs.spec.alpha/and arr cljs.core/let pairs cljs.core/map cljs.core/vec cljs.core/partition-all]}, :doc "Spec definitions for our dynamic code."}